{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nuras\\\\Desktop\\\\ForReact\\\\project\\\\src\\\\Components\\\\Test\\\\test.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport './test.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Test() {\n  _s();\n  // Работа с Цветами\n  // function ColorGenerator(){\n  //     const hexCode = \"0123456789ABCDEF\";\n  //     let color = \"\";\n\n  //     for(let i = 0; i < 6; i++){\n  //         color += hexCode[Math.floor(Math.random() * hexCode.length)] \n  //     }\n  //     return(\"#\" + color)\n  // }\n  // alert(ColorGenerator())\n\n  // let wrapper = document.querySelectorAll('.container')\n  // function setRandomColor(){\n  //     wrapper.forEach(() => {\n\n  //     })\n  // }\n  // setRandomColor()\n\n  // const [open, setOpen] = React.useState(false)\n  // <button className = \"button\" onClick={() =>{setOpen(true)}}>\n  //     Нажми на меня\n  // </button>\n  // {open && (\n  //     <div className = \"modalWindow\">\n  //         <h1>Title of Modal Window</h1>\n  //         <p>And Just any words to show</p>\n  //         <button className = \"button\" onClick={() =>{ setOpen(false)}}>Закрыть окно</button>\n  //     </div>\n  // )}\n\n  const [count, setCount] = React.useState(0);\n  const ArraysOfCol = [{\n    id: 1\n  }, {\n    id: 2\n  }, {\n    id: 3\n  }];\n  const ArraysOfColOnMap = ArraysOfCol.map(ArrayOfCol => /*#__PURE__*/_jsxDEV(Col, {\n    lg: \"4\",\n    md: \"6\",\n    sm: \"12\",\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"\\u041F\\u0440\\u043E\\u0441\\u0442\\u043E \\u0441\\u0447\\u0435\\u0442\\u0447\\u0438\\u043A: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: () => {\n        setCount(count + 1);\n      },\n      children: \"\\u041F\\u043B\\u044E\\u0441 +\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: () => {\n        setCount(count - 1);\n      },\n      children: \"\\u041C\\u0438\\u043D\\u0443\\u0441 -\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, ArrayOfCol.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    children: /*#__PURE__*/_jsxDEV(Row, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n_s(Test, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n_c = Test;\nexport default Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","Col","Container","Row","jsxDEV","_jsxDEV","Test","_s","count","setCount","useState","ArraysOfCol","id","ArraysOfColOnMap","map","ArrayOfCol","lg","md","sm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","fluid","_c","$RefreshReg$"],"sources":["C:/Users/nuras/Desktop/ForReact/project/src/Components/Test/test.js"],"sourcesContent":["import React from 'react';\r\n\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport './test.css';\r\n\r\nfunction Test(){\r\n\r\n    // Работа с Цветами\r\n    // function ColorGenerator(){\r\n    //     const hexCode = \"0123456789ABCDEF\";\r\n    //     let color = \"\";\r\n\r\n    //     for(let i = 0; i < 6; i++){\r\n    //         color += hexCode[Math.floor(Math.random() * hexCode.length)] \r\n    //     }\r\n    //     return(\"#\" + color)\r\n    // }\r\n    // alert(ColorGenerator())\r\n\r\n    // let wrapper = document.querySelectorAll('.container')\r\n    // function setRandomColor(){\r\n    //     wrapper.forEach(() => {\r\n            \r\n    //     })\r\n    // }\r\n    // setRandomColor()\r\n\r\n    // const [open, setOpen] = React.useState(false)\r\n    // <button className = \"button\" onClick={() =>{setOpen(true)}}>\r\n    //     Нажми на меня\r\n    // </button>\r\n    // {open && (\r\n    //     <div className = \"modalWindow\">\r\n    //         <h1>Title of Modal Window</h1>\r\n    //         <p>And Just any words to show</p>\r\n    //         <button className = \"button\" onClick={() =>{ setOpen(false)}}>Закрыть окно</button>\r\n    //     </div>\r\n    // )}\r\n\r\n    const [count, setCount] = React.useState(0);\r\n\r\n    const ArraysOfCol = [{\r\n        id: 1,\r\n    },\r\n    {\r\n        id: 2,\r\n    },\r\n    {\r\n        id: 3,\r\n    }\r\n];\r\n    const ArraysOfColOnMap = ArraysOfCol.map((ArrayOfCol) => \r\n    <Col key = {ArrayOfCol.id} lg = \"4\" md = \"6\" sm = \"12\" className = \"container\">\r\n        <h1>Просто счетчик: {count}</h1>\r\n        <button className = \"button\" onClick={() =>{setCount(count + 1)}}>Плюс +</button>\r\n        <button className = \"button\" onClick={() =>{setCount(count - 1)}}>Минус -</button>\r\n    </Col>\r\n    )\r\n\r\n    return(\r\n        <Container fluid>\r\n            <Row>\r\n                \r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Test"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,GAAG,EAAEC,SAAS,EAAEC,GAAG,QAAQ,iBAAiB;AACrD,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,SAASC,IAAIA,CAAA,EAAE;EAAAC,EAAA;EAEX;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,KAAK,CAACU,QAAQ,CAAC,CAAC,CAAC;EAE3C,MAAMC,WAAW,GAAG,CAAC;IACjBC,EAAE,EAAE;EACR,CAAC,EACD;IACIA,EAAE,EAAE;EACR,CAAC,EACD;IACIA,EAAE,EAAE;EACR,CAAC,CACJ;EACG,MAAMC,gBAAgB,GAAGF,WAAW,CAACG,GAAG,CAAEC,UAAU,iBACpDV,OAAA,CAACJ,GAAG;IAAuBe,EAAE,EAAG,GAAG;IAACC,EAAE,EAAG,GAAG;IAACC,EAAE,EAAG,IAAI;IAACC,SAAS,EAAG,WAAW;IAAAC,QAAA,gBAC1Ef,OAAA;MAAAe,QAAA,GAAI,mFAAgB,EAACZ,KAAK;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChCnB,OAAA;MAAQc,SAAS,EAAG,QAAQ;MAACM,OAAO,EAAEA,CAAA,KAAK;QAAChB,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;MAAA,CAAE;MAAAY,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACjFnB,OAAA;MAAQc,SAAS,EAAG,QAAQ;MAACM,OAAO,EAAEA,CAAA,KAAK;QAAChB,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;MAAA,CAAE;MAAAY,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,GAH1ET,UAAU,CAACH,EAAE;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAIpB,CACL,CAAC;EAED,oBACInB,OAAA,CAACH,SAAS;IAACwB,KAAK;IAAAN,QAAA,eACZf,OAAA,CAACF,GAAG;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEpB;AAACjB,EAAA,CA7DQD,IAAI;AAAAqB,EAAA,GAAJrB,IAAI;AA+Db,eAAeA,IAAI;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}